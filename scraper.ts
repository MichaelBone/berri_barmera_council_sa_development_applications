// Parses the development applications at the South Australian Berri Barmera Council web site
// and places them in a database.
//
// Michael Bone
// 4th December 2018

"use strict";

import * as fs from "fs";

// Suppress the "pre-main prep time" messages generated by tesseract.js (there is no other easy
// way to suppress these messages because it appears that the code runs in a separate process and
// so, for example, overriding console.log in the current process appears to have no effect).

let text = fs.readFileSync("node_modules/tesseract.js-core/index.js").toString().replace(/Module.\$a\("pre-main prep time\: "\+\(Date\.now\(\)\-tj\)\+" ms"\)/g, "true");
fs.writeFileSync("node_modules/tesseract.js-core/index.js", text);

import * as cheerio from "cheerio";
import * as request from "request-promise-native";
import * as sqlite3 from "sqlite3";
import * as urlparser from "url";
import * as moment from "moment";
import * as pdfjs from "pdfjs-dist";
import * as tesseract from "tesseract.js";
import * as jimp from "jimp";
import * as didyoumean from "didyoumean2";

sqlite3.verbose();

const DevelopmentApplicationsUrl = "http://www.berribarmera.sa.gov.au/page.aspx?u=375";
const CommentUrl = "mailto:bbc@bbc.sa.gov.au";

declare const process: any;

// Sets up an sqlite database.

async function initializeDatabase() {
    return new Promise((resolve, reject) => {
        let database = new sqlite3.Database("data.sqlite");
        database.serialize(() => {
            database.run("create table if not exists [data] ([council_reference] text primary key, [address] text, [description] text, [info_url] text, [comment_url] text, [date_scraped] text, [date_received] text, [on_notice_from] text, [on_notice_to] text)");
            resolve(database);
        });
    });
}

// Inserts a row in the database if the row does not already exist.

async function insertRow(database, developmentApplication) {
    return new Promise((resolve, reject) => {
        let sqlStatement = database.prepare("insert or ignore into [data] values (?, ?, ?, ?, ?, ?, ?, ?, ?)");
        sqlStatement.run([
            developmentApplication.applicationNumber,
            developmentApplication.address,
            developmentApplication.description,
            developmentApplication.informationUrl,
            developmentApplication.commentUrl,
            developmentApplication.scrapeDate,
            developmentApplication.receivedDate,
            null,
            null
        ], function(error, row) {
            if (error) {
                console.error(error);
                reject(error);
            } else {
                if (this.changes > 0)
                    console.log(`    Inserted: application \"${developmentApplication.applicationNumber}\" with address \"${developmentApplication.address}\", description \"${developmentApplication.description}\" and received date \"${developmentApplication.receivedDate}\" into the database.`);
                else
                    console.log(`    Skipped: application \"${developmentApplication.applicationNumber}\" with address \"${developmentApplication.address}\", description \"${developmentApplication.description}\" and received date \"${developmentApplication.receivedDate}\" because it was already present in the database.`);
                sqlStatement.finalize();  // releases any locks
                resolve(row);
            }
        });
    });
}

// A bounding rectangle.

interface Rectangle {
    x: number,
    y: number,
    width: number,
    height: number
}

// Gets a random integer in the specified range: [minimum, maximum).

function getRandom(minimum: number, maximum: number) {
    return Math.floor(Math.random() * (Math.floor(maximum) - Math.ceil(minimum))) + Math.ceil(minimum);
}

// Pauses for the specified number of milliseconds.

function sleep(milliseconds: number) {
    return new Promise(resolve => setTimeout(resolve, milliseconds));
}

// Converts image data from the PDF to a jimp format image.

function convertToJimpImage(image: any) {
    let pixelSize = (8 * image.data.length) / (image.width * image.height);
    let jimpImage = null;

    if (pixelSize === 1) {
        // A monochrome image (one bit per pixel).

        jimpImage = new (jimp as any)(image.width, image.height);
        for (let x = 0; x < image.width; x++) {
            for (let y = 0; y < image.height; y++) {
                let index = y * (image.width / 8);
                let bitIndex = x % 8;
                let byteIndex = (x - bitIndex) / 8;
                index += byteIndex;
                let color = null;
                if ((image.data[index] & (128 >> bitIndex)) === 0)
                    color = jimp.rgbaToInt(0, 0, 0, 255, undefined);  // black pixel
                else
                    color = jimp.rgbaToInt(255, 255, 255, 255, undefined);  // white pixel
                jimpImage.setPixelColor(color, image.width - x - 1, image.height - y - 1);  // flip due to 180° rotation
            }
        }
    } else {
        // Assume a 24 bit colour image (3 bytes per pixel).

        jimpImage = new (jimp as any)(image.width, image.height);
        for (let x = 0; x < image.width; x++) {
            for (let y = 0; y < image.height; y++) {
                let index = (y * image.width * 3) + (x * 3);
                let color = jimp.rgbaToInt(image.data[index], image.data[index + 1], image.data[index + 2], 255, undefined);
                jimpImage.setPixelColor(color, image.width - x - 1, image.height - y - 1);  // flip due to 180° rotation
            }
        }
    }

    return jimpImage;
}

// Segments an image vertically and horizontally based on blocks of white (or almost white) pixels
// in order to avoid using too much memory.  Very often a large image will be mostly white space.
// A very simple horizontal and then vertical search is performed for consecutive lines of white
// (or mostly white) pixels.

function segmentImage(jimpImage: any) {
    let bounds = { x: 0, y: 0, width: jimpImage.bitmap.width, height: jimpImage.bitmap.height };

    // Only segment large images (do not waste time on small images which are already small enough
    // that they will not cause too much memory to be used).

    if (jimpImage.bitmap.width * jimpImage.bitmap.height < 400 * 400)
        return [{ image: jimpImage, bounds: bounds }];
       
    // Segment the image based on white space.

    let rectangles: Rectangle[] = [];
    let horizontalRectangles: Rectangle[] = [];
    let verticalRectangles = segmentImageVertically(jimpImage, bounds);
    for (let verticalRectangle of verticalRectangles)
        horizontalRectangles = horizontalRectangles.concat(segmentImageHorizontally(jimpImage, verticalRectangle));
    for (let horizontalRectangle of horizontalRectangles)
        rectangles = rectangles.concat(segmentImageVertically(jimpImage, horizontalRectangle));  // repeat the segmentation vertically on the sub-images (because this may then produce even smaller images)

    // Extract images delineated by the white space.

    let segments: { image: jimp, bounds: Rectangle }[] = [];
    for (let rectangle of rectangles) {
        let croppedJimpImage: jimp = new (jimp as any)(rectangle.width, rectangle.height);
        croppedJimpImage.blit(jimpImage, 0, 0, rectangle.x, rectangle.y, rectangle.width, rectangle.height);            
        segments.push({ image: croppedJimpImage, bounds: rectangle });
    }
    return segments;
}

// Segments an image vertically (within the specified bounds) by searching for blocks of
// consecutive, white (or close to white) horizontal lines.

function segmentImageVertically(jimpImage: any, bounds: Rectangle) {
    let whiteBlocks = [];

    let isPreviousWhiteLine = false;
    for (let y = bounds.y; y < bounds.y + bounds.height; y++) {
        // Count the number of white pixels across the current horizontal line.

        let whiteCount = 0;
        for (let x = bounds.x; x < bounds.x + bounds.width; x++) {
            let value = jimpImage.getPixelColor(x, y);
            if (value === 0xffffffff)  // performance improvement (for the common case of a pure white pixel)
                whiteCount++;
            else {
                let color = (jimp as any).intToRGBA(value);
                if (color.r > 240 && color.g > 240 && color.b > 240)  // white or just off-white
                    whiteCount++;
            }
        }

        // If the line is mostly white pixels then it is considered a white line.

        let isWhiteLine = (whiteCount >= bounds.width - 2);  // allow up to two non-white pixels

        if (isWhiteLine) {
            if (isPreviousWhiteLine)
                whiteBlocks[whiteBlocks.length - 1].height++;  // increase the size of the current block of white
            else
                whiteBlocks.push({ y: y, height: 1 });  // start a new block
        }

        isPreviousWhiteLine = isWhiteLine;
    }

    // Only keep blocks of white that consist of 25 consecutive lines or more (an arbitrary value).

    whiteBlocks = whiteBlocks.filter(whiteBlock => whiteBlock.height >= 25);

    // Determine the rectangles that remain when the blocks of white are removed.

    let rectangles = [];
    for (let index = 0; index <= whiteBlocks.length; index++) {
        let y = (index === 0) ? bounds.y : (whiteBlocks[index - 1].y + whiteBlocks[index - 1].height);
        let height = ((index === whiteBlocks.length) ? (bounds.y + bounds.height) : whiteBlocks[index].y) - y;
        if (height > 0)
            rectangles.push({ x: bounds.x, y: y, width: bounds.width, height: height });
    }

    return rectangles;
}

// Segments an image horizontally (within the specified bounds) by searching for blocks of
// consecutive, white (or close to white) vertical lines.

function segmentImageHorizontally(jimpImage: any, bounds: Rectangle) {
    let whiteBlocks = [];

    let isPreviousWhiteLine = false;
    for (let x = bounds.x; x < bounds.x + bounds.width; x++) {
        // Count the number of white pixels across the current vertical line.

        let whiteCount = 0;
        for (let y = bounds.y; y < bounds.y + bounds.height; y++) {
            let value = jimpImage.getPixelColor(x, y);
            if (value === 0xffffffff)  // performance improvement (for the common case of a pure white pixel)
                whiteCount++;
            else {
                let color = (jimp as any).intToRGBA(value);
                if (color.r > 240 && color.g > 240 && color.b > 240)  // white or just off-white
                    whiteCount++;
            }
        }

        // If the line is mostly white pixels then it is considered a white line.

        let isWhiteLine = (whiteCount >= bounds.height - 2);  // allow up to two non-white pixels

        if (isWhiteLine) {
            if (isPreviousWhiteLine)
                whiteBlocks[whiteBlocks.length - 1].width++;  // increase the size of the current block of white
            else
                whiteBlocks.push({ x: x, width: 1 });  // start a new block
        }

        isPreviousWhiteLine = isWhiteLine;
    }

    // Only keep blocks of white that consist of 25 consecutive lines or more (an arbitrary value).

    whiteBlocks = whiteBlocks.filter(whiteBlock => whiteBlock.width >= 25);

    // Determine the bounds of the rectangles that remain when the blocks of white are removed.

    let rectangles = [];
    for (let index = 0; index <= whiteBlocks.length; index++) {
        let x = (index === 0) ? bounds.x : (whiteBlocks[index - 1].x + whiteBlocks[index - 1].width);
        let width = ((index === whiteBlocks.length) ? (bounds.x + bounds.width) : whiteBlocks[index].x) - x;
        if (width > 0)
            rectangles.push({ x: x, y: bounds.y, width: width, height: bounds.height });
    }

    return rectangles;
}

// Parses an image (from a PDF document).

async function parseImage(image: any, bounds: Rectangle) {
    // Convert the image data into a format that can be used by jimp and then segment the image
    // based on blocks of white.

    // let segments = segmentImage(convertToJimpImage(image));
    let segments = segmentImage(convertToJimpImage(image));
    if (global.gc)
        global.gc();

    let elements: Element[] = [];
    for (let segment of segments) {
        // Attempt to avoid using too much memory by scaling down large images.

        let scaleFactor = 1.0;
        if (segment.bounds.width * segment.bounds.height > 1000 * 1000) {
            scaleFactor = 0.5;
            console.log(`    Scaling a large image (${segment.bounds.width}×${segment.bounds.height}) by ${scaleFactor} to reduce memory usage.`);
            segment.image = segment.image.scale(scaleFactor, jimp.RESIZE_BEZIER);
        }

        let imageBuffer = await new Promise((resolve, reject) => segment.image.getBuffer(jimp.MIME_PNG, (error, buffer) => error ? reject(error) : resolve(buffer)));
        segment.image = undefined;  // attempt to release memory

        // Report larger memory usage and larger images for troubleshooting purposes.

        let memoryUsage = process.memoryUsage();
        if (memoryUsage.rss > 200 * 1024 * 1024)  // 200 MB
            console.log(`    Memory Usage: rss: ${Math.round(memoryUsage.rss / (1024 * 1024))} MB, heapTotal: ${Math.round(memoryUsage.heapTotal / (1024 * 1024))} MB, heapUsed: ${Math.round(memoryUsage.heapUsed / (1024 * 1024))} MB, external: ${Math.round(memoryUsage.external / (1024 * 1024))} MB`);
        if (segment.bounds.width * segment.bounds.height > 700 * 700)
            console.log(`    Parsing a large image with bounds { x: ${Math.round(segment.bounds.x)}, y: ${Math.round(segment.bounds.y)}, width: ${Math.round(segment.bounds.width)}, height: ${Math.round(segment.bounds.height)} }.`);

        // Note that textord_old_baselines is set to 0 so that text that is offset by half the
        // height of the the font is correctly recognised.

        let result: any = await new Promise((resolve, reject) => { tesseract.recognize(imageBuffer, { textord_old_baselines: "0" }).then(function(result) { resolve(result); }) });
        tesseract.terminate();
        if (global.gc)
            global.gc();

        // Simplify the lines (remove most of the information generated by tesseract.js).

        if (result && result.blocks && result.blocks.length)
            for (let block of result.blocks)
                for (let paragraph of block.paragraphs)
                    for (let line of paragraph.lines)
                        elements = elements.concat(line.words.map(word => {
                            return {
                                text: word.text,
                                confidence: word.confidence,
                                choiceCount: word.choices.length,
                                x: bounds.x + segment.bounds.x + word.bbox.x0 / scaleFactor,
                                y: bounds.y + segment.bounds.y + word.bbox.y0 / scaleFactor,
                                width: (word.bbox.x1 - word.bbox.x0) / scaleFactor,
                                height: (word.bbox.y1 - word.bbox.y0) / scaleFactor
                            };
                        }));
    }
console.log(elements);
    return elements;
}

// Parses the development applications in the specified date range.

async function parsePdf(url: string) {
    console.log(`Reading development applications from ${url}.`);

    let developmentApplications = [];
    let recordCount = -1;

    // Read the PDF.

    let buffer = await request({ url: url, encoding: null, proxy: process.env.MORPH_PROXY });
    await sleep(2000 + getRandom(0, 5) * 1000);

    // Parse the PDF.  Each page has the details of multiple applications.  Note that the PDF is
    // re-parsed on each iteration of the loop (ie. once for each page).  This then avoids large
    // memory usage by the PDF (just calling page._destroy() on each iteration of the loop appears
    // not to be enough to release all memory used by the PDF parsing).

    for (let pageIndex = 0; pageIndex < 500; pageIndex++) {  // limit to an arbitrarily large number of pages (to avoid any chance of an infinite loop)
        let pdf = await pdfjs.getDocument({ data: buffer, disableFontFace: true, ignoreErrors: true });
        if (pageIndex >= pdf.numPages)
            break;

        console.log(`Reading and parsing applications from page ${pageIndex + 1} of ${pdf.numPages}.`);
        let page = await pdf.getPage(pageIndex + 1);
        let viewport = await page.getViewport(1.0);
        let operators = await page.getOperatorList();

        // Ensure that the page is not rotated.

        console.log(`Page ${pageIndex + 1} is rotated ${page.rotate}°.`);

        // Find and parse any images in the current PDF page.

        let elements: Element[] = [];

        for (let index = 0; index < operators.fnArray.length; index++) {
            if (operators.fnArray[index] !== pdfjs.OPS.paintImageXObject && operators.fnArray[index] !== pdfjs.OPS.paintImageMaskXObject)
                continue;

            // The operator either contains the name of an image or an actual image.

            let image = operators.argsArray[index][0];
            if (typeof image === "string")
                image = page.objs.get(image);  // get the actual image using its name
            else
                operators.argsArray[index][0] = undefined;  // attempt to release memory used by the image

            // Obtain the transform that applies to the image.  Note that the first image in the
            // PDF typically has a pdfjs.OPS.dependency element in the fnArray between it and its
            // transform (pdfjs.OPS.transform).

            let transform = undefined;
            if (index - 1 >= 0 && operators.fnArray[index - 1] === pdfjs.OPS.transform)
                transform = operators.argsArray[index - 1];
            else if (index - 2 >= 0 && operators.fnArray[index - 1] === pdfjs.OPS.dependency && operators.fnArray[index - 2] === pdfjs.OPS.transform)
                transform = operators.argsArray[index - 2];
            else
                continue;

            // Use the transform to translate the X and Y co-ordinates, but assume that the width
            // and height are consistent between all images and do not need to be scaled.  This is
            // almost always the case; only the first image is sometimes an exception (with a
            // scale factor of 2.083333 instead of 4.166666).

            let bounds: Rectangle = {
                x: (transform[4] * image.height) / transform[3],
                y: ((viewport.height - transform[5] - transform[3]) * image.height) / transform[3],
                width: image.width,
                height: image.height
            };
           
            // Parse the text from the image.

            elements = elements.concat(await parseImage(image, bounds));
            if (global.gc)
                global.gc();
        }

        // Release the memory used by the PDF now that it is no longer required (it will be
        // re-parsed on the next iteration of the loop for the next page).

        await pdf.destroy();
        if (global.gc)
            global.gc();

    //     // Ignore extremely low height elements (because these can be parsed as text but are
    //     // very unlikely to actually be text; for example see the October 2016 PDF on page 19).
    //     // In some rare cases they may be valid (such as a full stop far from other text).

    //     elements = elements.filter(element => element.height > 2);

    //     // Sort the elements by Y co-ordinate and then by X co-ordinate.

    //     let elementComparer = (a, b) => (a.y > b.y) ? 1 : ((a.y < b.y) ? -1 : ((a.x > b.x) ? 1 : ((a.x < b.x) ? -1 : 0)));
    //     elements.sort(elementComparer);

    //     // Group the elements into sections based on where the "Dev App No." text starts (and
    //     // any other element the "Dev App No." elements line up with horizontally with a margin
    //     // of error equal to about the height of the "Dev App No." text; this is done in order
    //     // to capture the lodged date, which may be higher up than the "Dev App No." text).

    //     let applicationElementGroups = [];
    //     let startElements = findStartElements(elements);
    //     for (let index = 0; index < startElements.length; index++) {
    //         // Determine the highest Y co-ordinate of this row and the next row (or the bottom of
    //         // the current page).  Allow some leeway vertically (add some extra height) because
    //         // in some cases the lodged date is a fair bit higher up than the "Dev App No." text
    //         // (see the similar leeway used in getReceivedDate).
            
    //         let startElement = startElements[index];
    //         let raisedStartElement: Element = {
    //             text: startElement.text,
    //             confidence: startElement.confidence,
    //             x: startElement.x,
    //             y: startElement.y - 3 * startElement.height,  // leeway
    //             width: startElement.width,
    //             height: startElement.height };
    //         let rowTop = getRowTop(elements, raisedStartElement);
    //         let nextRowTop = (index + 1 < startElements.length) ? getRowTop(elements, startElements[index + 1]) : Number.MAX_VALUE;

    //         // Extract all elements between the two rows.

    //         applicationElementGroups.push({ startElement: startElements[index], elements: elements.filter(element => element.y >= rowTop && element.y + element.height < nextRowTop) });
    //     }

    //     // The first page typically has a record count which can be used to determine if all
    //     // applications are successfully parsed later (although sometimes this record count
    //     // itself is innaccurate).

    //     if (pageIndex === 0 && startElements.length >= 1)  // first page
    //         recordCount = getRecordCount(elements, startElements[0]);

    //     // Parse the development application from each group of elements (ie. a section of the
    //     // current page of the PDF document).  If the same application number is encountered a
    //     // second time in the same document then this likely indicates the parsing of the images
    //     // has incorrectly recognised some of the digits in the application number.  In this case
    //     // add a suffix to the application number so it is unique (and so will be inserted into
    //     // the database later instead of being ignored).

    //     for (let applicationElementGroup of applicationElementGroups) {
    //         let developmentApplication = parseApplicationElements(applicationElementGroup.elements, applicationElementGroup.startElement, url);
    //         if (developmentApplication !== undefined) {
    //             let suffix = 0;
    //             let applicationNumber = developmentApplication.applicationNumber;
    //             while (developmentApplications.some(otherDevelopmentApplication => otherDevelopmentApplication.applicationNumber === developmentApplication.applicationNumber))
    //                 developmentApplication.applicationNumber = `${applicationNumber} (${++suffix})`;  // add a unique suffix
    //             developmentApplications.push(developmentApplication);
    //         }
    //     }
    }

    // // Check whether the expected number of development applications have been encountered.

    // if (recordCount !== -1) {
    //     let recordCountDiscrepancy = recordCount - developmentApplications.length;
    //     if (recordCountDiscrepancy <= -2)
    //         console.log(`Warning: ${-recordCountDiscrepancy} extra records were extracted from the PDF (record count at start of PDF: ${recordCount}; extracted application count: ${developmentApplications.length}).`);
    //     else if (recordCountDiscrepancy == -1)
    //         console.log(`Warning: 1 extra record was extracted from the PDF (record count at start of PDF: ${recordCount}; extracted application count: ${developmentApplications.length}).`);
    //     else if (recordCountDiscrepancy == 1)
    //         console.log(`Warning: 1 record was not extracted from the PDF (record count at start of PDF: ${recordCount}; extracted application count: ${developmentApplications.length}).`);
    //     else if (recordCountDiscrepancy >= 2)
    //         console.log(`Warning: ${recordCountDiscrepancy} records were not extracted from the PDF (record count at start of PDF: ${recordCount}; extracted application count: ${developmentApplications.length}).`);
    // }

    // return developmentApplications;
    
    // await insertRow(database, {
    //     applicationNumber: applicationNumber,
    //     address: address,
    //     description: description,
    //     informationUrl: developmentApplicationUrl,
    //     commentUrl: CommentUrl,
    //     scrapeDate: moment().format("YYYY-MM-DD"),
    //     receivedDate: receivedDate.isValid ? receivedDate.format("YYYY-MM-DD") : ""
    // });

    return [];
}

// Parses the development applications.

async function main() {
    // Ensure that the database exists.

    let database = await initializeDatabase();

    // Read the main page of development applications.

    console.log(`Retrieving page: ${DevelopmentApplicationsUrl}`);

    let body = await request({ url: DevelopmentApplicationsUrl, rejectUnauthorized: false, proxy: process.env.MORPH_PROXY });
    await sleep(2000 + getRandom(0, 5) * 1000);
    let $ = cheerio.load(body);

    let pdfUrls: string[] = [];
    for (let element of $("div.u6ListItem a").get()) {
        let pdfUrl = new urlparser.URL(element.attribs.href, DevelopmentApplicationsUrl).href
        if (!pdfUrls.some(url => url === pdfUrl))
            pdfUrls.push(pdfUrl);
    }

    // Obtain the PDF URLs from the previous years pages.

    let yearUrls: string[] = [];
    for (let element of $("div.unityHtmlArticle h4 a").get()) {
        let pdfUrl = new urlparser.URL(element.attribs.href, DevelopmentApplicationsUrl).href
        if (!yearUrls.some(url => url === pdfUrl))
            yearUrls.push(pdfUrl);
    }

    for (let yearUrl of yearUrls) {
        body = await request({ url: yearUrl, rejectUnauthorized: false, proxy: process.env.MORPH_PROXY });
//        await sleep(2000 + getRandom(0, 5) * 1000);
        $ = cheerio.load(body);

        let elements = []
            .concat($("td.uContentListDesc p a").get())
            .concat($("td.u6ListTD div.u6ListItem a").get())
            .concat($("div.unityHtmlArticle p a").get());

        for (let element of elements) {
            let pdfUrl = new urlparser.URL(element.attribs.href, DevelopmentApplicationsUrl).href
            if (!pdfUrls.some(url => url === pdfUrl))
                pdfUrls.push(pdfUrl);
        }
    }

    // Always parse the most recent PDF file and randomly select one other PDF file to parse.

    if (pdfUrls.length === 0) {
        console.log("No PDF files were found on the page.");
        return;
    }

    console.log(`Found ${pdfUrls.length} PDF file(s).  Selecting two to parse.`);

    // Select the most recent PDF.  And randomly select one other PDF (avoid processing all PDFs
    // at once because this may use too much memory, resulting in morph.io terminating the current
    // process).

    let selectedPdfUrls: string[] = [];
    selectedPdfUrls.push(pdfUrls.shift());
    if (pdfUrls.length > 0)
        selectedPdfUrls.push(pdfUrls[getRandom(1, pdfUrls.length)]);
    if (getRandom(0, 2) === 0)
        selectedPdfUrls.reverse();

selectedPdfUrls = [ "http://www.berribarmera.sa.gov.au/webdata/resources/files/August%202018.pdf" ];

    for (let pdfUrl of selectedPdfUrls) {
        console.log(`Parsing document: ${pdfUrl}`);
        let developmentApplications = await parsePdf(pdfUrl);
        console.log(`Parsed ${developmentApplications.length} development application(s) from document: ${pdfUrl}`);

        // Attempt to avoid reaching 512 MB memory usage (this will otherwise result in the
        // current process being terminated by morph.io).

        if (global.gc)
            global.gc();

        console.log(`Inserting development applications into the database.`);
        for (let developmentApplication of developmentApplications)
            await insertRow(database, developmentApplication);
    }

    // await parsePdf(pdfUrl, database);
}

main().then(() => console.log("Complete.")).catch(error => console.error(error));
